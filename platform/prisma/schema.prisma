// [3] Projects and related models

enum ProjectScope {
  private
  org
  public
}

enum ProjectStatus {
  draft
  published
}

enum ContributorRole {
  owner
  editor
  viewer
}

enum ContributorStatus {
  pending
  active
  revoked
}

model Project {
  id   String  @id @default(cuid()) @map("id")
  name String  @default("Untitled") @map("name")
  slug String? @unique @map("slug")
  desc String? @map("desc")

  type String @map("type") // 'blog' | 'papertrail'

  // relationship (1:1)
  blog       Blog? // only set if type = 'blog'
  papertrail PapertrailBoard? //only set if type = 'papertrail'

  // lifecycle / meta
  scope  ProjectScope?  @map("scope")
  status ProjectStatus? @default(draft) @map("status")

  // optional multi-tenant support
  tenantId String? @map("tenant_id")

  contributors ProjectContributor[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("projects")
}

model ProjectContributor {
  id           String            @id @default(cuid()) @map("id")
  projectId    String            @map("project_id")
  userId       String?           @map("user_id")
  invitedEmail String?           @map("invited_email")
  role         ContributorRole   @map("role")
  status       ContributorStatus @default(pending) @map("status")
  invitedAt    DateTime          @default(now()) @map("invited_at")
  acceptedAt   DateTime?         @map("accepted_at")
  note         String?           @map("note")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([projectId, userId])
  @@unique([projectId, invitedEmail])
  @@index([userId])
  @@index([invitedEmail])
  @@map("project_contributors")
}

// [3.1] Blog model (for projects of type 'blog')
enum BlogProvider {
  astro
}

model Blog {
  id        String  @id @default(cuid()) @map("id")
  projectId String  @unique @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  title     String       @map("title")
  subtitle  String?      @map("subtitle")
  type      String       @default("blog:git") @map("type") // e.g., 'blog:git'
  provider  BlogProvider @default(astro) @map("provider") // e.g., 'astro', 'jekyll'
  gitConfig GitConfig?
  domain    String?      @unique @map("domain") // custom domain
  meta      Json?        @map("meta") // e.g., { "theme": "minimal", "postsPerPage": 10 }

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("blogs")
}

// [3.1.1] Git configuration for blogs
enum GitProvider {
  github
  gitlab
  bitbucket
  other
}

enum AuthType {
  ssh
  https
  token
  userpass
}

model GitConfig {
  id     String  @id @default(cuid()) @map("id")
  blogId String? @unique @map("blog_id")
  blog   Blog?   @relation(fields: [blogId], references: [id], onDelete: Cascade)

  provider   GitProvider @map("provider")
  repoUrl    String      @map("repo_url")
  branch     String      @default("main") @map("branch")
  contentDir String?     @map("content_dir")
  authType   AuthType?   @default(ssh) @map("auth_type")
  authSecret String?     @map("auth_secret")
  meta       Json?       @map("meta") // e.g., { "lastSyncedAt": "2023-10-01T12:00:00Z" }

  userName  String? @map("user_name")
  userEmail String? @map("user_email")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("git_configs")
}

// [3.2] Papertrail model (for projects of type 'papertrail')
model PapertrailBoard {
  id        String  @id @default(cuid()) @map("id")
  projectId String  @unique @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  title         String  @default("Untitled") @map("title")
  schemaVersion Int     @default(1) @map("schema_version")
  layout        String? // global board layout preferences (hierarchical, force-directed)
  meta          Json?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  nodes PaperTrailNode[]
  edges PaperTrailEdge[]

  @@index([createdAt])
  @@map("papertrail_boards")
}

// [3.2.1] Nodes for PaperTrail
model PaperTrailNode {
  id      String          @id @default(cuid()) @map("id")
  boardId String          @map("board_id")
  board   PapertrailBoard @relation(fields: [boardId], references: [id], onDelete: Cascade)

  type String @map("type") // text | image | link
  x    Int    @map("x")
  y    Int    @map("y")
  w    Int?   @map("w")
  h    Int?   @map("h")

  // content fields expected by server.mjs
  title    String? @map("title")
  text     String? @map("text")
  html     String? @map("html")
  descHtml String? @map("desc_html")
  linkUrl  String? @map("link_url")
  imageUrl String? @map("image_url")

  meta Json? // custom fields
  tags PaperTrailNodeTag[]

  @@index([boardId])
  @@index([boardId, type])
  @@map("papertrail_nodes")
}

// [3.2.1] Edges for PaperTrail.Nodes
model PaperTrailEdge {
  id      String          @id @default(cuid()) @map("id")
  boardId String          @map("board_id")
  board   PapertrailBoard @relation(fields: [boardId], references: [id], onDelete: Cascade)

  sourceId String  @map("source_id")
  targetId String  @map("target_id")
  label    String? @map("label")
  dashed   Boolean @default(false) @map("dashed") // TODO: maybe can this can merge into `style` later.
  color    String? @map("color")

  @@index([boardId])
  @@index([boardId, sourceId])
  @@index([boardId, targetId])
  @@map("papertrail_edges")
}

// [3.2.2] Tags for PaperTrail.Nodes
model PaperTrailTag {
  id    String              @id @default(cuid()) @map("id")
  name  String              @unique @map("name")
  nodes PaperTrailNodeTag[]

  @@map("tags")
}

// [3.2.3] Tags for PaperTrail.Nodes-Tags
model PaperTrailNodeTag {
  nodeId String         @map("node_id")
  node   PaperTrailNode @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  tagId String        @map("tag_id")
  tag   PaperTrailTag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([nodeId, tagId])
  @@index([nodeId])
  @@index([tagId])
  @@map("papertrail_node_tags")
}

// [3.2.4] Tags for PaperTrail
model PapertrailComment {
  id        String   @id @default(uuid())
  projectId String   @map("project_id")
  entityId  String   @map("entity_id") // --> node:<nodeId>, edge:<edgeId>
  authorId  String   @map("author_id")
  body      String
  createdAt DateTime @default(now()) @map("created_at")

  @@index([projectId, entityId])
  @@map("papertrail_comments")
}

// [3.2.5] Attachments for PaperTrail
model PapertrailAttachment {
  id        String   @id @default(uuid())
  projectId String   @map("project_id")
  nodeId    String?  @map("node_id")
  kind      String // 'file' | 'url'
  url       String?
  fileKey   String?  @map("file_key") // storage key
  name      String?
  sizeBytes Int?     @map("size_bytes")
  meta      Json?
  createdAt DateTime @default(now()) @map("created_at")

  @@index([projectId, nodeId])
  @@map("papertrail_attachment")
}
